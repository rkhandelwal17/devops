functions:
- id: check
  workflow: check
  type: subflow
- id: git
  image: gcr.io/direktiv/apps/git:1.0
  type: knative-workflow
- id: terraform
  image: gcr.io/direktiv/apps/terraform:1.0
  type: knative-workflow
  
states:

# the flow needs a name for the instance and action
- id: validate-input
  type: validate
  schema:
    title: Nginx Server Action
    type: object
    required: ["name", "action"]
    properties:
      name:
        type: string
      action:
        type: string
        enum: ["apply", "destroy"]
  transition: get-bucket


# get configure bucket
- id: get-bucket
  type: getter
  variables:
  - key: bucket
    scope: namespace
  transition: clone-tf

# clone the terrafrom project
- id: clone-tf
  type: action
  action:
    function: git
    input: 
      commands:
      - command: git clone https://github.com/rkhandelwal17/devops out/workflow/devops
  transition: setup

# run terraform
- id: setup
  type: action
  log: using bucket jq(.var.bucket | @base64d)
  action:
    function: terraform
    secrets: ["awsacess", "awssecret"]
    files:
    - key: devops
      scope: workflow
      type: tar.gz
    input:
      variables:
       - name: instance
         value: jq(.name)
      commands:
      - command: sed -i s/REPLACE/jq(.name)/g devops/terraform/backend.hcl
      - command: sed -i s/AWSBUCKET/jq(.var.bucket | @base64d )/g devops/terraform/backend.hcl
      - command: terraform -chdir=devops/terraform init -backend-config=backend.hcl
      - command: terraform -chdir=devops/terraform jq(.action) -auto-approve
      - command: |-
          js(
            if (data["action"] == "apply") {
              return "terraform -chdir=devops/terraform output -json"
            } else {
              return "echo no additional command"
            }
          )  
      envs:
      - name: AWS_ACCESS_KEY_ID
        value: jq(.secrets.awsacess)
      - name: AWS_SECRET_ACCESS_KEY
        value: jq(.secrets.awssecret)

